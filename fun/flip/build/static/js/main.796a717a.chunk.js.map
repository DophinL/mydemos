{"version":3,"sources":["alg.js","App.jsx","serviceWorker.js","index.js"],"names":["Participant","id","choosen","this","dataSource","youAreVisionary","filter","item","forEach","find","push","youAreMyMrsRight","chooseMe","whoChooseMe","includes","Header","col","style","width","label","SheetRenderer","props","className","columns","map","index","key","columnIndex","children","PureComponent","DescRow","content","p","mrsRight","whoIsMrsRight","length","join","generateRowContent","localStore","store","namespace","App","useState","get","Array","fill","arr","value","grid","setGrid","visible","setVisible","handleChange","useCallback","changes","_grid","row","cell","set","existRows","trim","ds","slice","type","size","onClick","data","sheetRenderer","valueRenderer","onCellsChanged","title","footer","onCancel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.796a717a.chunk.js","sourcesContent":["// const dataSource = [{id: 1, choosen: [4, 2, 3]}, {id: 2, choosen: [6,4,5]}, {id: 3, choosen: [4,5,6]}, {id: 4, choosen: [1,2,3]}, {id: 5, choosen: [1,3,4]}, {id: 6, choosen: [1,2,4]} ]\n\n// 被选出人的结构\nclass Participant{\n  constructor(id, choosen){\n    this.id = id;\n    this.choosen = choosen;\n  }\n\n  whoChooseMe(dataSource){\n    const youAreVisionary = []\n    const rest = dataSource.filter(item => item.id !== this.id);\n\n    rest.forEach(item => {\n      const areYouBeenChoosen = item.choosen.find(id => id === this.id);\n\n      if(areYouBeenChoosen){\n        youAreVisionary.push(item.id)\n      }\n    })\n\n    return youAreVisionary;\n  }\n\n  whoIsMrsRight(dataSource){\n    const youAreMyMrsRight = [];\n    const chooseMe = this.whoChooseMe(dataSource);\n\n    this.choosen.forEach(id => {\n      if(chooseMe.includes(id)){\n        youAreMyMrsRight.push(id)\n      }\n    })\n\n    return youAreMyMrsRight;\n  }\n}\n\nexport function generateRowContent(id, choosen, dataSource){\n  const p = new Participant(id, choosen);\n  const chooseMe = p.whoChooseMe(dataSource);\n  const mrsRight = p.whoIsMrsRight(dataSource);\n  let content = ``;\n  debugger;\n\n  if(chooseMe.length === 0){\n    content = '很遗憾没有人选您，考虑一下内部消化？'\n  } else {\n    content = `${p.id}: 被 ${chooseMe.join(',')} 等${chooseMe.length}人选择`;\n\n    if(mrsRight.length > 0){\n      content +=`，而且，你心动的 ${mrsRight.join(',')} 也选择了你！！！`\n    }\n  }\n\n  return content;\n}\n\n// dataSource.forEach((item) => {\n//   const p = new Participant(item.id, item.choosen);\n//   const chooseMe = p.whoChooseMe(dataSource);\n//   const mrsRight = p.whoIsMrsRight(dataSource);\n\n//   if(chooseMe.length === 0){\n//     console.log('很遗憾没有人选您，考虑一下内部消化？')\n//   } else {\n//     console.log(`${p.id}: 被 ${chooseMe.join(',')} 等${chooseMe.length}人选择`)\n\n//     if(mrsRight.length > 0){\n//       console.log(`，而且，你心动的 ${mrsRight.join(',')} 也选择了你！！！`)\n//     }\n//   }\n// })","import React, { PureComponent, useCallback, useState } from 'react';\nimport { Button, Modal } from 'antd';\nimport 'antd/dist/antd.css';\nimport ReactDataSheet from 'react-datasheet';\nimport 'react-datasheet/lib/react-datasheet.css';\nimport store from 'store2';\nimport './App.css';\nimport { generateRowContent } from './alg';\n\nconst Header = ({ col }) => {\n  return <th style={{ width: col.width }}>{col.label}</th>\n}\n\nclass SheetRenderer extends PureComponent {\n  render() {\n    const { className, columns } = this.props\n    return (\n      <table className={className}>\n        <thead>\n          <tr>\n            {\n              columns.map((col, index) => (\n                <Header key={col.label} col={col} columnIndex={index} />\n              ))\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.children}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nfunction DescRow({ id, choosen, dataSource }) {\n  const content = generateRowContent(id, choosen, dataSource);\n  return (\n    <p>{content}</p>\n  )\n}\n\nfunction buildGrid(row, col) {\n  return new Array(row).fill(0).map(arr => {\n    return new Array(col).fill(0).map(() => {\n      return {\n        value: ''\n      }\n    })\n  })\n}\n\nconst columns = [{ label: '男主/女主', width: '100px' },\n{ label: '选择1', width: '100px' },\n{ label: '选择2', width: '100px' },\n{ label: '选择3', width: '100px' },\n{ label: '选择4', width: '100px' },\n{ label: '选择5', width: '100px' },\n{ label: '选择6', width: '100px' },\n{ label: '选择7', width: '100px' },\n{ label: '选择8', width: '100px' },\n{ label: '选择9', width: '100px' },\n{ label: '选择10', width: '100px' },\n]\n\n// 本地缓存\nconst localStore = store.namespace('flip');\n\nfunction App() {\n\n  const [grid, setGrid] = useState(localStore.get('grid') || buildGrid(50, 11))\n  const [visible, setVisible] = useState(false)\n\n  const renderSheet = (props) => {\n    return <SheetRenderer columns={columns} {...props}></SheetRenderer>\n  }\n\n  const handleChange = useCallback((changes) => {\n    const _grid = grid.map(row => [...row])\n    changes.forEach(({ cell, row, col, value }) => {\n      if (_grid[row] && _grid[row][col]) {\n        _grid[row][col] = { ..._grid[row][col], value }\n      }\n    })\n\n    setGrid(_grid)\n    localStore.set('grid', _grid)\n  }, [grid])\n\n  const existRows = grid.filter(row => !!row[0].value.trim());\n  const ds = existRows.map(row => ({\n    id: row[0].value,\n    choosen: row.slice(1).map(col => col.value.trim())\n  }))\n\n  return (\n    <div className=\"App\">\n      <Button type=\"primary\" size=\"large\" onClick={() => {\n        setVisible(true);\n      }}>\n        计算匹配\n        </Button>\n      <div className=\"wrapper\">\n        <ReactDataSheet\n          data={grid}\n          sheetRenderer={renderSheet}\n          valueRenderer={cell => cell.value}\n          onCellsChanged={handleChange}\n        />\n      </div>\n      {\n        visible ? (\n          <Modal\n            width={1200}\n            title=\"计算匹配\"\n            visible\n            footer={null}\n            onCancel={() => {setVisible(false)}}\n          >\n            {\n              existRows.map((row, index) => {\n                const choosen = row.slice(1).map((item) => item.value);\n                return <DescRow key={index} id={row[0].value} choosen={choosen} dataSource={ds}></DescRow>\n              })\n            }\n          </Modal>\n        ) : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}